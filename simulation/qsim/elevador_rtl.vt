// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/06/2025 01:23:13"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    elevador_rtl
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module elevador_rtl_vlg_sample_tst(
	botoes_externos,
	botoes_internos,
	clk,
	reset,
	sensor_andar,
	sampler_tx
);
input [2:0] botoes_externos;
input [2:0] botoes_internos;
input  clk;
input  reset;
input [1:0] sensor_andar;
output sampler_tx;

reg sample;
time current_time;
always @(botoes_externos or botoes_internos or clk or reset or sensor_andar)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module elevador_rtl_vlg_check_tst (
	led_porta_aberta,
	leds_direcao,
	mostrador_7seg,
	sampler_rx
);
input  led_porta_aberta;
input [1:0] leds_direcao;
input [6:0] mostrador_7seg;
input sampler_rx;

reg  led_porta_aberta_expected;
reg [1:0] leds_direcao_expected;
reg [6:0] mostrador_7seg_expected;

reg  led_porta_aberta_prev;
reg [1:0] leds_direcao_prev;
reg [6:0] mostrador_7seg_prev;

reg  led_porta_aberta_expected_prev;
reg [1:0] leds_direcao_expected_prev;
reg [6:0] mostrador_7seg_expected_prev;

reg  last_led_porta_aberta_exp;
reg [1:0] last_leds_direcao_exp;
reg [6:0] last_mostrador_7seg_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	led_porta_aberta_prev = led_porta_aberta;
	leds_direcao_prev = leds_direcao;
	mostrador_7seg_prev = mostrador_7seg;
end

// update expected /o prevs

always @(trigger)
begin
	led_porta_aberta_expected_prev = led_porta_aberta_expected;
	leds_direcao_expected_prev = leds_direcao_expected;
	mostrador_7seg_expected_prev = mostrador_7seg_expected;
end



// expected led_porta_aberta
initial
begin
	led_porta_aberta_expected = 1'bX;
end 
// expected leds_direcao[ 1 ]
initial
begin
	leds_direcao_expected[1] = 1'bX;
end 
// expected leds_direcao[ 0 ]
initial
begin
	leds_direcao_expected[0] = 1'bX;
end 
// expected mostrador_7seg[ 6 ]
initial
begin
	mostrador_7seg_expected[6] = 1'bX;
end 
// expected mostrador_7seg[ 5 ]
initial
begin
	mostrador_7seg_expected[5] = 1'bX;
end 
// expected mostrador_7seg[ 4 ]
initial
begin
	mostrador_7seg_expected[4] = 1'bX;
end 
// expected mostrador_7seg[ 3 ]
initial
begin
	mostrador_7seg_expected[3] = 1'bX;
end 
// expected mostrador_7seg[ 2 ]
initial
begin
	mostrador_7seg_expected[2] = 1'bX;
end 
// expected mostrador_7seg[ 1 ]
initial
begin
	mostrador_7seg_expected[1] = 1'bX;
end 
// expected mostrador_7seg[ 0 ]
initial
begin
	mostrador_7seg_expected[0] = 1'bX;
end 
// generate trigger
always @(led_porta_aberta_expected or led_porta_aberta or leds_direcao_expected or leds_direcao or mostrador_7seg_expected or mostrador_7seg)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected led_porta_aberta = %b | expected leds_direcao = %b | expected mostrador_7seg = %b | ",led_porta_aberta_expected_prev,leds_direcao_expected_prev,mostrador_7seg_expected_prev);
	$display("| real led_porta_aberta = %b | real leds_direcao = %b | real mostrador_7seg = %b | ",led_porta_aberta_prev,leds_direcao_prev,mostrador_7seg_prev);
`endif
	if (
		( led_porta_aberta_expected_prev !== 1'bx ) && ( led_porta_aberta_prev !== led_porta_aberta_expected_prev )
		&& ((led_porta_aberta_expected_prev !== last_led_porta_aberta_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_porta_aberta :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_porta_aberta_expected_prev);
		$display ("     Real value = %b", led_porta_aberta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_porta_aberta_exp = led_porta_aberta_expected_prev;
	end
	if (
		( leds_direcao_expected_prev[0] !== 1'bx ) && ( leds_direcao_prev[0] !== leds_direcao_expected_prev[0] )
		&& ((leds_direcao_expected_prev[0] !== last_leds_direcao_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_direcao[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_direcao_expected_prev);
		$display ("     Real value = %b", leds_direcao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_direcao_exp[0] = leds_direcao_expected_prev[0];
	end
	if (
		( leds_direcao_expected_prev[1] !== 1'bx ) && ( leds_direcao_prev[1] !== leds_direcao_expected_prev[1] )
		&& ((leds_direcao_expected_prev[1] !== last_leds_direcao_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_direcao[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_direcao_expected_prev);
		$display ("     Real value = %b", leds_direcao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_direcao_exp[1] = leds_direcao_expected_prev[1];
	end
	if (
		( mostrador_7seg_expected_prev[0] !== 1'bx ) && ( mostrador_7seg_prev[0] !== mostrador_7seg_expected_prev[0] )
		&& ((mostrador_7seg_expected_prev[0] !== last_mostrador_7seg_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mostrador_7seg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mostrador_7seg_expected_prev);
		$display ("     Real value = %b", mostrador_7seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mostrador_7seg_exp[0] = mostrador_7seg_expected_prev[0];
	end
	if (
		( mostrador_7seg_expected_prev[1] !== 1'bx ) && ( mostrador_7seg_prev[1] !== mostrador_7seg_expected_prev[1] )
		&& ((mostrador_7seg_expected_prev[1] !== last_mostrador_7seg_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mostrador_7seg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mostrador_7seg_expected_prev);
		$display ("     Real value = %b", mostrador_7seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mostrador_7seg_exp[1] = mostrador_7seg_expected_prev[1];
	end
	if (
		( mostrador_7seg_expected_prev[2] !== 1'bx ) && ( mostrador_7seg_prev[2] !== mostrador_7seg_expected_prev[2] )
		&& ((mostrador_7seg_expected_prev[2] !== last_mostrador_7seg_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mostrador_7seg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mostrador_7seg_expected_prev);
		$display ("     Real value = %b", mostrador_7seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mostrador_7seg_exp[2] = mostrador_7seg_expected_prev[2];
	end
	if (
		( mostrador_7seg_expected_prev[3] !== 1'bx ) && ( mostrador_7seg_prev[3] !== mostrador_7seg_expected_prev[3] )
		&& ((mostrador_7seg_expected_prev[3] !== last_mostrador_7seg_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mostrador_7seg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mostrador_7seg_expected_prev);
		$display ("     Real value = %b", mostrador_7seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mostrador_7seg_exp[3] = mostrador_7seg_expected_prev[3];
	end
	if (
		( mostrador_7seg_expected_prev[4] !== 1'bx ) && ( mostrador_7seg_prev[4] !== mostrador_7seg_expected_prev[4] )
		&& ((mostrador_7seg_expected_prev[4] !== last_mostrador_7seg_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mostrador_7seg[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mostrador_7seg_expected_prev);
		$display ("     Real value = %b", mostrador_7seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mostrador_7seg_exp[4] = mostrador_7seg_expected_prev[4];
	end
	if (
		( mostrador_7seg_expected_prev[5] !== 1'bx ) && ( mostrador_7seg_prev[5] !== mostrador_7seg_expected_prev[5] )
		&& ((mostrador_7seg_expected_prev[5] !== last_mostrador_7seg_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mostrador_7seg[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mostrador_7seg_expected_prev);
		$display ("     Real value = %b", mostrador_7seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mostrador_7seg_exp[5] = mostrador_7seg_expected_prev[5];
	end
	if (
		( mostrador_7seg_expected_prev[6] !== 1'bx ) && ( mostrador_7seg_prev[6] !== mostrador_7seg_expected_prev[6] )
		&& ((mostrador_7seg_expected_prev[6] !== last_mostrador_7seg_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mostrador_7seg[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mostrador_7seg_expected_prev);
		$display ("     Real value = %b", mostrador_7seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mostrador_7seg_exp[6] = mostrador_7seg_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module elevador_rtl_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] botoes_externos;
reg [2:0] botoes_internos;
reg clk;
reg reset;
reg [1:0] sensor_andar;
// wires                                               
wire led_porta_aberta;
wire [1:0] leds_direcao;
wire [6:0] mostrador_7seg;

wire sampler;                             

// assign statements (if any)                          
elevador_rtl i1 (
// port map - connection between master ports and signals/registers   
	.botoes_externos(botoes_externos),
	.botoes_internos(botoes_internos),
	.clk(clk),
	.led_porta_aberta(led_porta_aberta),
	.leds_direcao(leds_direcao),
	.mostrador_7seg(mostrador_7seg),
	.reset(reset),
	.sensor_andar(sensor_andar)
);

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #100000 1'b0;
end 
// botoes_internos[ 2 ]
initial
begin
	botoes_internos[2] = 1'b0;
end 
// botoes_internos[ 1 ]
initial
begin
	botoes_internos[1] = 1'b1;
end 
// botoes_internos[ 0 ]
initial
begin
	botoes_internos[0] = 1'b0;
end 
// sensor_andar[ 1 ]
initial
begin
	sensor_andar[1] = 1'b1;
end 
// sensor_andar[ 0 ]
initial
begin
	sensor_andar[0] = 1'b0;
end 
// botoes_externos[ 2 ]
initial
begin
	botoes_externos[2] = 1'b0;
end 
// botoes_externos[ 1 ]
initial
begin
	botoes_externos[1] = 1'b0;
end 
// botoes_externos[ 0 ]
initial
begin
	botoes_externos[0] = 1'b1;
end 

elevador_rtl_vlg_sample_tst tb_sample (
	.botoes_externos(botoes_externos),
	.botoes_internos(botoes_internos),
	.clk(clk),
	.reset(reset),
	.sensor_andar(sensor_andar),
	.sampler_tx(sampler)
);

elevador_rtl_vlg_check_tst tb_out(
	.led_porta_aberta(led_porta_aberta),
	.leds_direcao(leds_direcao),
	.mostrador_7seg(mostrador_7seg),
	.sampler_rx(sampler)
);
endmodule

